RUN \
        echo "Installing dependencies..." && \
        apt-get install -yq ${OPENCORE_PKGS} ${X264_PKGS} ${X265_PKGS} ${OGG_PKGS} ${OPUS_PKGS} ${VORBIS_PKGS} ${VPX_PKGS} ${WEBP_PKGS} ${MP3LAME_PKGS} ${XVIDCORE_PKGS} ${FDKAAC_PKGS} ${OPENJP_PKGS} ${FREETYPE_PKGS} ${VIDSTAB_PKGS} ${FRIBIDI_PKGS} ${FONTCONFIG_PKGS} ${LIBASS_PKGS} ${AOM_PKGS} ${SVTAV1_PKGS} ${DAV1D_PKGS} ${XORG_MACROS_PKGS} ${XPROTO_PKGS} ${XAU_PKGS} ${PTHREAS_STUBS_PKGS} ${XML2_PKGS} ${BLURAY_PKGS} ${ZMQ_PKGS} ${PNG_PKGS} ${ARIBB24_PKGS} ${ZIMG_PKGS} ${THEORA_PKGS} ${SRT_PKGS} ${LIBDRM_PKGS}

        # apt install libdrm-dev

## kvazaar https://github.com/ultravideo/kvazaar
RUN \
        echo "Building kvazaar-${KVAZAAR_VERSION}" && \
        DIR=/tmp/kvazaar && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/ultravideo/kvazaar/releases/download/v${KVAZAAR_VERSION}/kvazaar-${KVAZAAR_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f kvazaar-${KVAZAAR_VERSION}.tar.gz && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make && \
        make install && \
        rm -rf ${DIR}

## libvmaf https://github.com/Netflix/vmaf
RUN \
        echo "Adding g++ for VMAF build" && \
        apt-get install -yq g++

# https://github.com/Netflix/vmaf/issues/788
RUN \
        if which meson || false; then \
        echo "Building VMAF v${LIBVMAF_VERSION}" && \
        DIR=/tmp/vmaf && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/Netflix/vmaf/archive/refs/tags/v${LIBVMAF_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LIBVMAF_VERSION}.tar.gz && \
        ls -al && \
        mkdir ./libvmaf/build && \
        cd ./libvmaf/build && \
        meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "${PREFIX}" && \
        ninja && \
        ninja install && \
        # meson build --buildtype release --prefix=${PREFIX} && \
        # ninja -vC build && \
        # ninja -vC build install && \
        mkdir -p ${PREFIX}/share/model/ && \
        cp -r /tmp/vmaf/model/* ${PREFIX}/share/model/ && \
        rm -rf ${DIR}; \
        else \
        echo "VMAF skipped."; \
        fi


## Download ffmpeg https://ffmpeg.org/
RUN  \
        echo "Building (intial configure) ffmpeg-${FFMPEG_VERSION}" && \
        DIR=/tmp/ffmpeg && mkdir -p ${DIR} && cd ${DIR} && \
        curl -sLO https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
        tar -jx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
        ./configure     --disable-debug  --disable-doc    --disable-ffplay   --enable-shared --enable-gpl  --extra-libs=-ldl && \
        make ;  make install



# ## Build ffmpeg https://ffmpeg.org/
RUN  \
        echo "Building (final detailed configure) ffmpeg-${FFMPEG_VERSION}" && \
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" && \
        dpkg -l |grep srt && \
        DIR=/tmp/ffmpeg && cd ${DIR} && \
        export PKG_CONFIG_PATH=${PKG_CONFIG_PATH} && \
        ./configure  \
        %%FFMPEG_CONFIG_FLAGS%% && \
        make clean && \
        make && \
        make install && \
        make tools/zmqsend && cp tools/zmqsend ${PREFIX}/bin/ && \
        make distclean && \
        hash -r && \
        cd tools && \
        make qt-faststart && cp qt-faststart ${PREFIX}/bin/

