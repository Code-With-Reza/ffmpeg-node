## opencore-amr https://sourceforge.net/projects/opencore-amr/
# opencore-amr: from packages
RUN \
        echo "installing opencore-amr with debian packages" && \
        apt-get install -yq libopencore-amrnb-dev libopencore-amrwb-dev

# ## x264 http://www.videolan.org/developers/x264.html
RUN \
        echo "installing x264 with debian packages" && \
        apt-get install -yq libx264-dev

### x265 http://x265.org/ ( videolan )
RUN \ 
        echo "installing x265 with debian packages" && \
        apt-get install -yq libx265-dev libnuma-dev

### libogg https://www.xiph.org/ogg/ ( xiph )
RUN \
        echo "installing libogg with debian packages" && \
        apt-get install -yq libogg-dev

### libopus https://www.opus-codec.org/ ( xiph )
#   https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libopus
RUN \
        echo "installing libopus with debian packages" && \
        apt-get install -yq libopus-dev

### libvorbis https://xiph.org/vorbis/ ( xiph )
RUN \
        echo "installing libvorbis with debian packages" && \
        apt-get install -yq libvorbis-dev

### libvpx https://www.webmproject.org/code/
#          https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libvpx
RUN \
        echo "installing libvpx-dev with debian packages" && \
        apt-get install -yq libvpx-dev
        # dpkg -s libvpx-dev | grep -o '^Version:' | cut -d ' ' -f 2


### libwebp https://developers.google.com/speed/webp/
RUN \
        echo "installing libwebp with debian packages" && \
        apt-get install -yq libwebp-dev

### libmp3lame http://lame.sourceforge.net/
RUN \
        echo "installing libmp3lame with debian packages" && \
        apt-get install -yq libmp3lame-dev

### xvid (xvidcore) https://www.xvid.com/
RUN \
        echo "installing xvidcore with debian packages" && \
        apt-get install -yq libxvidcore-dev

### fdk-aac https://github.com/mstorsjo/fdk-aac
#   https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libfdk-aac
RUN \
        echo "installing libfdk-aac-dev with debian packages" && \
        apt-get install -yq libfdk-aac-dev

## openjpeg https://github.com/uclouvain/openjpeg
RUN \
        echo "installing libopenjp2-7-dev with debian packages" && \
        apt-get install -yq libopenjp2-7-dev

## freetype https://www.freetype.org/
# make sure to pass in --no-install-recommends for this one its globbie
RUN \ 
        echo "installing libfreetype6-dev with debian packages" && \
        apt-get install -yq --no-install-recommends libfreetype6-dev libfreetype6

## libvidstab https://github.com/georgmartius/vid.stab
RUN \
        echo "installing libvidstab-dev with debian packages" && \
        apt-get install -yq libvidstab-dev

## fridibi https://www.fribidi.org/
RUN \
        echo "installing libfribidi-dev with debian packages" && \
        apt-get install -yq libfribidi-dev

## fontconfig https://www.freedesktop.org/wiki/Software/fontconfig/
RUN \
        echo "installing libfontconfig-dev with debian packages" && \
        apt-get install -yq --no-install-recommends libfontconfig-dev fontconfig-config

## libass https://github.com/libass/libass
RUN \
        echo "installing libass-dev with debian packages" && \
        apt-get install -yq libass-dev

# lib aom 
# https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libaom
RUN \
        echo "installing libaom-dev with debian packages" && \
        apt-get install -yq libaom-dev

## libsvtav1 https://gitlab.com/AOMediaCodec/SVT-AV1.git
#            https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libsvtav1
RUN \
        echo "installing libsvtav1-dev with debian packages" && \
        apt-get install -yq libsvtav1-dev libsvtav1enc-dev libsvtav1dec-dev

## libdav1d https://code.videolan.org/videolan/dav1d
## https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libdav1d
## installed w/ apt-get in the build stage
RUN \
        echo "installing libdav1d-dev with debian packages" && \
        apt-get install -yq libdav1d-dev

## x.org: util-macros (and supporting libraries) for screen capture https://xcb.freedesktop.org/
RUN \
        echo "installing libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev with debian packages" && \
        apt-get install -yq libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev

## x.org: xproto
RUN \
        echo "installing x11proto-core-dev with debian packages" && \
        apt-get install -yq x11proto-core-dev

## libXau
RUN \
        echo "installing libxau-dev with debian packages" && \
        apt-get install -yq libxau-dev

## libpthread-stubs
RUN \ 
        echo "installing libpthread-stubs0-dev with debian packages" && \
        apt-get install -yq libpthread-stubs0-dev

## libxml2 - for libbluray
RUN \
        echo "installing libxml2-dev with debian packages" && \
        apt-get install -yq libxml2-dev

## libbluray - Requires libxml, freetype, and fontconfig
RUN \
        echo "installing libbluray-dev with debian packages" && \
        apt-get install -yq libbluray-dev

## libzmq https://github.com/zeromq/libzmq/
# this one pulls in a bunch of dependencies
RUN \
        echo "installing libzmq3-dev with debian packages" && \
        apt-get install -yq libzmq3-dev


## libpng
# also pulls in a bunch of stuff
RUN \ 
        echo "installing libpng-dev with debian packages" && \
        apt-get install -yq libpng-dev

## libaribb24
RUN \
        echo "installing libaribb24-dev with debian packages" && \
        apt-get install -yq libaribb24-dev

# zimg  https://github.com/sekrit-twc/zimg
RUN \
        echo "installing zimg-dev with debian packages" && \
        apt-get install -yq libzimg-dev

### libtheora http://www.theora.org/ ( xiph )
#             https://stackoverflow.com/questions/4810996/how-to-resolve-configure-guessing-build-type-failure
RUN \
        echo "installing libtheora-dev with debian packages" && \
        apt-get install -yq libtheora-dev

## libsrt https://github.com/Haivision/srt
RUN \
        echo "installing libsrt-dev with debian package: Secure Reliable Transport UDP streaming library (OpenSSL flavour)" && \
        apt-get install -yq libsrt-openssl-dev

## kvazaar https://github.com/ultravideo/kvazaar
RUN \
        echo "Building kvazaar-${KVAZAAR_VERSION}" && \
        DIR=/tmp/kvazaar && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/ultravideo/kvazaar/releases/download/v${KVAZAAR_VERSION}/kvazaar-${KVAZAAR_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f kvazaar-${KVAZAAR_VERSION}.tar.gz && \
        # ./autogen.sh && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make && \
        make install && \
        rm -rf ${DIR}

## libvmaf https://github.com/Netflix/vmaf
RUN \
        echo "Adding g++ for VMAF build" && \
        apt-get install -yq g++

# https://github.com/Netflix/vmaf/issues/788
RUN \
        if which meson || false; then \
        echo "Building VMAF v${LIBVMAF_VERSION}" && \
        DIR=/tmp/vmaf && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/Netflix/vmaf/archive/refs/tags/v${LIBVMAF_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LIBVMAF_VERSION}.tar.gz && \
        ls -al && \
        mkdir ./libvmaf/build && \
        cd ./libvmaf/build && \
        meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "${PREFIX}" && \
        ninja && \
        ninja install && \
        # meson build --buildtype release --prefix=${PREFIX} && \
        # ninja -vC build && \
        # ninja -vC build install && \
        mkdir -p ${PREFIX}/share/model/ && \
        cp -r /tmp/vmaf/model/* ${PREFIX}/share/model/ && \
        rm -rf ${DIR}; \
        else \
        echo "VMAF skipped."; \
        fi


## Download ffmpeg https://ffmpeg.org/
RUN  \
        echo "Building (intial configure) ffmpeg-${FFMPEG_VERSION}" && \
        DIR=/tmp/ffmpeg && mkdir -p ${DIR} && cd ${DIR} && \
        curl -sLO https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
        tar -jx --strip-components=1 -f ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
        ./configure     --disable-debug  --disable-doc    --disable-ffplay   --enable-shared --enable-gpl  --extra-libs=-ldl && \
        make ;  make install



# ## Build ffmpeg https://ffmpeg.org/
# RUN  \
#         echo "Building (final detailed configure) ffmpeg-${FFMPEG_VERSION}" && \
#         echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" && \
#         dpkg -l |grep srt && \
#         DIR=/tmp/ffmpeg && cd ${DIR} && \
#         # 0.095 PKG_CONFIG_PATH=/opt/ffmpeg/share/pkgconfig:/opt/ffmpeg/lib/pkgconfig:/opt/ffmpeg/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
#         # 0.131 ii  libsrt-openssl-dev:amd64      1.5.3-1build2                     amd64        Secure Reliable Transport UDP streaming library (OpenSSL flavour development)
#         # 0.131 ii  libsrt1.5-openssl:amd64       1.5.3-1build2                     amd64        Secure Reliable Transport UDP streaming library (OpenSSL flavour)
#         # 46.40 ERROR: srt >= 1.3.0 not found using pkg-config
#         # libvmaf >= 2.0.0 not found using pkg-config
#         # $ dpkg -L libsrt-openssl-dev
#         # /usr/include/srt/srt.h
#         # /usr/lib/x86_64-linux-gnu/libsrt.a
#         # /usr/lib/x86_64-linux-gnu/pkgconfig/srt.pc
#         # /usr/lib/x86_64-linux-gnu/libsrt.so
#         # $ dpkg -L libsrt1.5-openssl
#         # /usr/lib/x86_64-linux-gnu/libsrt.so.1.5.3
#         # /usr/share/lintian/overrides/libsrt1.5-openssl
#         # /usr/lib/x86_64-linux-gnu/libsrt.so.1.5
#         # /usr/lib/x86_64-linux-gnu/libsrt.so
#         # /usr/lib/x86_64-linux-gnu/pkgconfig/
#         export PKG_CONFIG_PATH=${PKG_CONFIG_PATH} && \
#         ./configure  \
#         %%FFMPEG_CONFIG_FLAGS%%
#         # make clean && \
#         # make && \
#         # make install && \
#         # make tools/zmqsend && cp tools/zmqsend ${PREFIX}/bin/ && \
#         # make distclean && \
#         # hash -r && \
#         # cd tools && \
#         # make qt-faststart && cp qt-faststart ${PREFIX}/bin/

# RUN \
#         echo "look at the ffmpeg build log" \
#         cat /tmp/ffmpeg/config.log \
#         echo "ffmpeg build log end" \
#         echo "look at the environement" \
#         env

